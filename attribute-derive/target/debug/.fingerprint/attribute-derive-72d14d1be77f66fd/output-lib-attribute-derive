{"message":"`GenericParam` doesn't implement `std::fmt::Display`","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1406,"byte_end":1415,"line_start":39,"line_end":39,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"        let converter = match input_type.to_string().as_str() {","highlight_start":42,"highlight_end":51}],"label":"`GenericParam` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":4365,"byte_end":4369,"line_start":170,"line_end":170,"column_start":26,"column_end":30,"is_primary":false,"text":[{"text":"        $mac!([$(#[$m])* $pub] $($t)*);","highlight_start":26,"highlight_end":30}],"label":"doesn't satisfy `GenericParam: ToString`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":1327,"byte_end":1362,"line_start":55,"line_end":55,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        strip_attrs_pub!(ast_enum!($($t)*));","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":1543,"byte_end":1594,"line_start":65,"line_end":65,"column_start":9,"column_end":60,"is_primary":false,"text":[{"text":"        ast_enum!($(#[$enum_attr])* $pub $enum $name $body);","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/generics.rs","byte_start":776,"byte_end":1546,"line_start":23,"line_end":46,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"ast_enum_of_structs! {","highlight_start":1,"highlight_end":23},{"text":"    /// A generic type parameter, lifetime, or const generic: `T: Into<String>`,","highlight_start":1,"highlight_end":81},{"text":"    /// `'a: 'b`, `const LEN: usize`.","highlight_start":1,"highlight_end":38},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// *This type is available only if Syn is built with the `\"derive\"` or `\"full\"`","highlight_start":1,"highlight_end":85},{"text":"    /// feature.*","highlight_start":1,"highlight_end":18},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Syntax tree enum","highlight_start":1,"highlight_end":27},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is a [syntax tree enum].","highlight_start":1,"highlight_end":43},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [syntax tree enum]: Expr#syntax-tree-enums","highlight_start":1,"highlight_end":51},{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"full\", feature = \"derive\"))))]","highlight_start":1,"highlight_end":78},{"text":"    pub enum GenericParam {","highlight_start":1,"highlight_end":28},{"text":"        /// A generic type parameter: `T: Into<String>`.","highlight_start":1,"highlight_end":57},{"text":"        Type(TypeParam),","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A lifetime definition: `'a: 'b + 'c + 'd`.","highlight_start":1,"highlight_end":55},{"text":"        Lifetime(LifetimeDef),","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A const generic parameter: `const LENGTH: usize`.","highlight_start":1,"highlight_end":62},{"text":"        Const(ConstParam),","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ast_enum_of_structs!","def_site_span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":1374,"byte_end":1406,"line_start":59,"line_end":59,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! ast_enum_of_structs {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"ast_enum!","def_site_span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":929,"byte_end":950,"line_start":38,"line_end":38,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! ast_enum {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"strip_attrs_pub!","def_site_span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":4206,"byte_end":4234,"line_start":166,"line_end":166,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! strip_attrs_pub {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":4365,"byte_end":4369,"line_start":170,"line_end":170,"column_start":26,"column_end":30,"is_primary":false,"text":[{"text":"        $mac!([$(#[$m])* $pub] $($t)*);","highlight_start":26,"highlight_end":30}],"label":"doesn't satisfy `GenericParam: std::fmt::Display`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":1327,"byte_end":1362,"line_start":55,"line_end":55,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        strip_attrs_pub!(ast_enum!($($t)*));","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":1543,"byte_end":1594,"line_start":65,"line_end":65,"column_start":9,"column_end":60,"is_primary":false,"text":[{"text":"        ast_enum!($(#[$enum_attr])* $pub $enum $name $body);","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/generics.rs","byte_start":776,"byte_end":1546,"line_start":23,"line_end":46,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"ast_enum_of_structs! {","highlight_start":1,"highlight_end":23},{"text":"    /// A generic type parameter, lifetime, or const generic: `T: Into<String>`,","highlight_start":1,"highlight_end":81},{"text":"    /// `'a: 'b`, `const LEN: usize`.","highlight_start":1,"highlight_end":38},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// *This type is available only if Syn is built with the `\"derive\"` or `\"full\"`","highlight_start":1,"highlight_end":85},{"text":"    /// feature.*","highlight_start":1,"highlight_end":18},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Syntax tree enum","highlight_start":1,"highlight_end":27},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is a [syntax tree enum].","highlight_start":1,"highlight_end":43},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [syntax tree enum]: Expr#syntax-tree-enums","highlight_start":1,"highlight_end":51},{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"full\", feature = \"derive\"))))]","highlight_start":1,"highlight_end":78},{"text":"    pub enum GenericParam {","highlight_start":1,"highlight_end":28},{"text":"        /// A generic type parameter: `T: Into<String>`.","highlight_start":1,"highlight_end":57},{"text":"        Type(TypeParam),","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A lifetime definition: `'a: 'b + 'c + 'd`.","highlight_start":1,"highlight_end":55},{"text":"        Lifetime(LifetimeDef),","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A const generic parameter: `const LENGTH: usize`.","highlight_start":1,"highlight_end":62},{"text":"        Const(ConstParam),","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ast_enum_of_structs!","def_site_span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":1374,"byte_end":1406,"line_start":59,"line_end":59,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! ast_enum_of_structs {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"ast_enum!","def_site_span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":929,"byte_end":950,"line_start":38,"line_end":38,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! ast_enum {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"strip_attrs_pub!","def_site_span":{"file_name":"/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/macros.rs","byte_start":4206,"byte_end":4234,"line_start":166,"line_end":166,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! strip_attrs_pub {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`GenericParam: std::fmt::Display`\nwhich is required by `GenericParam: ToString`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: `GenericParam` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:39:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        let converter = match input_type.to_string().as_str() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`GenericParam` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/brianheise/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.99/src/generics.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mast_enum_of_structs! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A generic type parameter, lifetime, or const generic: `T: Into<String>`,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// `'a: 'b`, `const LEN: usize`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `GenericParam: ToString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `GenericParam: std::fmt::Display`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `GenericParam: std::fmt::Display`\u001b[0m\n\u001b[0m           which is required by `GenericParam: ToString`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
